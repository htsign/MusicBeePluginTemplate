<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
    var tagTypes = new List<string>(new[] { "artist", "albumArtist", "trackTitle", "album", "composer" });
    tagTypes.AddRange(Enumerable.Range(1, 16).Select(i => "custom" + i.ToString()));
#>
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using static MusicBeePlugin.Plugin;

namespace MusicBeePlugin
{
    public class SongFile : IDisposable
    {
        private MusicBeeApiInterface mbApiInterface;
        private Dictionary<string, PropertyInfo> propertyNamesCache = new Dictionary<string, PropertyInfo>();

        #region constructor
        public SongFile(MusicBeeApiInterface api, string filePath)
        {
            mbApiInterface = api;
            FullPath = filePath;
        }
        #endregion

        #region public properties
		public bool AutoCommit { get; set; } = true;

        public string FullPath { get; }
        
        private string fileName = null;
        public string FileName => fileName ?? (fileName = Path.GetFileName(FullPath));
		
        public string this[string name]
        {
            get
            {
                PropertyInfo pi = null;

                if (!propertyNamesCache.TryGetValue(name, out pi))
                {
                    pi = typeof(SongFile).GetProperty(name);
                    propertyNamesCache[name] = pi;
                }
                return pi?.GetValue(this, null) as string;
            }
            set
            {
                PropertyInfo pi = null;

                if (!propertyNamesCache.TryGetValue(name, out pi))
                {
                    pi = typeof(SongFile).GetProperty(name);
                    propertyNamesCache[name] = pi;
                }
                pi?.SetValue(this, value, null);
            }
        }

        public string this[MetaDataType type]
        {
            get { return this[type.ToString()]; }
            set { this[type.ToString()] = value; }
        }
        <# foreach (string tagType in tagTypes) { #>

        private string <#= tagType #> = null;
        public string <#= ToPascalCase(tagType) #>
        {
            get { return <#= tagType #> ?? (<#= tagType #> = mbApiInterface.Library_GetFileTag(FullPath, MetaDataType.<#= ToPascalCase(tagType) #>)); }
            set { mbApiInterface.Library_SetFileTag(FullPath, MetaDataType.<#= ToPascalCase(tagType) #>, <#= tagType #> = value); }
        }
        <# } #>
#endregion

        #region public methods
        public bool Commit() => mbApiInterface.Library_CommitTagsToFile(FullPath);
        #endregion

		#region disposable pattern
		public void Dispose()
		{
			if (AutoCommit) Commit();
			GC.SuppressFinalize(this);
		}

		~SongFile()
		{
			Dispose();
		}
		#endregion
    }
}

<#+
public static string ToPascalCase(string text)
{
    if (text.Length < 1) return string.Empty;
    return char.ToUpper(text[0]) + text.Substring(1);
}
#>